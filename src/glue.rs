use jsapi::*;

pub const JS_STRUCTURED_CLONE_VERSION: u32 = 5;

pub enum Action { }
unsafe impl Sync for ProxyTraps { }
/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProxyTraps {
    pub enter: ::std::option::Option<unsafe extern "C" fn
                                         (cx: *mut JSContext,
                                          proxy: HandleObject, id: HandleId,
                                          action: Action, bp: *mut u8) -> u8>,
    pub getOwnPropertyDescriptor: ::std::option::Option<unsafe extern "C" fn
                                                            (cx:
                                                                 *mut JSContext,
                                                             proxy:
                                                                 HandleObject,
                                                             id: HandleId,
                                                             desc:
                                                                 MutableHandle<JSPropertyDescriptor>)
                                                            -> u8>,
    pub defineProperty: ::std::option::Option<unsafe extern "C" fn
                                                  (cx: *mut JSContext,
                                                   proxy: HandleObject,
                                                   id: HandleId,
                                                   desc:
                                                       Handle<JSPropertyDescriptor>,
                                                   result:
                                                       *mut ObjectOpResult)
                                                  -> u8>,
    pub ownPropertyKeys: ::std::option::Option<unsafe extern "C" fn
                                                   (cx: *mut JSContext,
                                                    proxy: HandleObject,
                                                    props: *mut AutoIdVector)
                                                   -> u8>,
    pub delete_: ::std::option::Option<unsafe extern "C" fn
                                           (cx: *mut JSContext,
                                            proxy: HandleObject, id: HandleId,
                                            result: *mut ObjectOpResult)
                                           -> u8>,
    pub enumerate: ::std::option::Option<unsafe extern "C" fn
                                             (cx: *mut JSContext,
                                              proxy: HandleObject,
                                              objp: MutableHandleObject)
                                             -> u8>,
    pub preventExtensions: ::std::option::Option<unsafe extern "C" fn
                                                     (cx: *mut JSContext,
                                                      proxy: HandleObject,
                                                      result:
                                                          *mut ObjectOpResult)
                                                     -> u8>,
    pub isExtensible: ::std::option::Option<unsafe extern "C" fn
                                                (cx: *mut JSContext,
                                                 proxy: HandleObject,
                                                 succeeded: *mut u8) -> u8>,
    pub has: ::std::option::Option<unsafe extern "C" fn
                                       (cx: *mut JSContext,
                                        proxy: HandleObject, id: HandleId,
                                        bp: *mut u8) -> u8>,
    pub get: ::std::option::Option<unsafe extern "C" fn
                                       (cx: *mut JSContext,
                                        proxy: HandleObject,
                                        receiver: HandleObject, id: HandleId,
                                        vp: MutableHandleValue) -> u8>,
    pub set: ::std::option::Option<unsafe extern "C" fn
                                       (cx: *mut JSContext,
                                        proxy: HandleObject,
                                        receiver: HandleObject, id: HandleId,
                                        vp: MutableHandleValue,
                                        result: *mut ObjectOpResult) -> u8>,
    pub call: ::std::option::Option<unsafe extern "C" fn
                                        (cx: *mut JSContext,
                                         proxy: HandleObject,
                                         args: *const CallArgs) -> u8>,
    pub construct: ::std::option::Option<unsafe extern "C" fn
                                             (cx: *mut JSContext,
                                              proxy: HandleObject,
                                              args: *const CallArgs) -> u8>,
    pub getPropertyDescriptor: ::std::option::Option<unsafe extern "C" fn
                                                         (cx: *mut JSContext,
                                                          proxy: HandleObject,
                                                          id: HandleId,
                                                          desc:
                                                              MutableHandle<JSPropertyDescriptor>)
                                                         -> u8>,
    pub hasOwn: ::std::option::Option<unsafe extern "C" fn
                                          (cx: *mut JSContext,
                                           proxy: HandleObject, id: HandleId,
                                           bp: *mut u8) -> u8>,
    pub getOwnEnumerablePropertyKeys: ::std::option::Option<unsafe extern "C" fn
                                                                (cx:
                                                                     *mut JSContext,
                                                                 proxy:
                                                                     HandleObject,
                                                                 props:
                                                                     *mut AutoIdVector)
                                                                -> u8>,
    pub nativeCall: ::std::option::Option<unsafe extern "C" fn
                                              (cx: *mut JSContext,
                                               test: IsAcceptableThis,
                                               _impl: NativeImpl,
                                               args: CallArgs) -> u8>,
    pub hasInstance: ::std::option::Option<unsafe extern "C" fn
                                               (cx: *mut JSContext,
                                                proxy: HandleObject,
                                                v: MutableHandleValue,
                                                bp: *mut u8) -> u8>,
    pub objectClassIs: ::std::option::Option<unsafe extern "C" fn
                                                 (obj: HandleObject,
                                                  classValue: ESClassValue,
                                                  cx: *mut JSContext) -> u8>,
    pub className: ::std::option::Option<unsafe extern "C" fn
                                             (cx: *mut JSContext,
                                              proxy: HandleObject)
                                             -> *const i8>,
    pub fun_toString: ::std::option::Option<unsafe extern "C" fn
                                                (cx: *mut JSContext,
                                                 proxy: HandleObject,
                                                 indent: u32)
                                                -> *mut JSString>,
    pub boxedValue_unbox: ::std::option::Option<unsafe extern "C" fn
                                                    (cx: *mut JSContext,
                                                     proxy: HandleObject,
                                                     vp: MutableHandleValue)
                                                    -> u8>,
    pub defaultValue: ::std::option::Option<unsafe extern "C" fn
                                                (cx: *mut JSContext,
                                                 obj: HandleObject,
                                                 hint: JSType,
                                                 vp: MutableHandleValue)
                                                -> u8>,
    pub trace: ::std::option::Option<unsafe extern "C" fn
                                         (trc: *mut JSTracer,
                                          proxy: *mut JSObject)>,
    pub finalize: ::std::option::Option<unsafe extern "C" fn
                                            (fop: *mut FreeOp,
                                             proxy: *mut JSObject)>,
    pub objectMoved: ::std::option::Option<unsafe extern "C" fn
                                               (proxy: *mut JSObject,
                                                old: *const JSObject)>,
    pub isCallable: ::std::option::Option<unsafe extern "C" fn
                                              (obj: *mut JSObject) -> u8>,
    pub isConstructor: ::std::option::Option<unsafe extern "C" fn
                                                 (obj: *mut JSObject) -> u8>,
}
impl ::std::default::Default for ProxyTraps {
    fn default() -> ProxyTraps { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WrapperProxyHandler {
    pub mTraps: ProxyTraps,
}
impl ::std::default::Default for WrapperProxyHandler {
    fn default() -> WrapperProxyHandler { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ForwardingProxyHandler {
    pub mTraps: ProxyTraps,
    pub mExtra: *const ::libc::c_void,
}
impl ::std::default::Default for ForwardingProxyHandler {
    fn default() -> ForwardingProxyHandler { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn InvokeGetOwnPropertyDescriptor(handler: *const ::libc::c_void,
                                          cx: *mut JSContext,
                                          proxy: HandleObject, id: HandleId,
                                          desc:
                                              MutableHandle<JSPropertyDescriptor>)
     -> u8;
    pub fn RUST_JS_NumberValue(d: f64) -> Value;
    pub fn RUST_FUNCTION_VALUE_TO_JITINFO(v: Value) -> *const JSJitInfo;
    pub fn CallJitGetterOp(info: *const JSJitInfo, cx: *mut JSContext,
                           thisObj: HandleObject,
                           specializedThis: *mut ::libc::c_void, argc: u32,
                           vp: *mut Value) -> u8;
    pub fn CallJitSetterOp(info: *const JSJitInfo, cx: *mut JSContext,
                           thisObj: HandleObject,
                           specializedThis: *mut ::libc::c_void, argc: u32,
                           vp: *mut Value) -> u8;
    pub fn CallJitMethodOp(info: *const JSJitInfo, cx: *mut JSContext,
                           thisObj: HandleObject,
                           specializedThis: *mut ::libc::c_void, argc: u32,
                           vp: *mut Value) -> u8;
    pub fn CreateProxyHandler(aTraps: *const ProxyTraps,
                              aExtra: *const ::libc::c_void)
     -> *const ::libc::c_void;
    pub fn CreateWrapperProxyHandler(aTraps: *const ProxyTraps)
     -> *const ::libc::c_void;
    pub fn NewCompileOptions(aCx: *mut JSContext, aFile: *const i8,
                             aLine: u32) -> *mut ReadOnlyCompileOptions;
    pub fn DeleteCompileOptions(aOpts: *mut ReadOnlyCompileOptions);
    pub fn NewProxyObject(aCx: *mut JSContext,
                          aHandler: *const ::libc::c_void, aPriv: HandleValue,
                          proto: *mut JSObject, parent: *mut JSObject,
                          call: *mut JSObject, construct: *mut JSObject)
     -> *mut JSObject;
    pub fn WrapperNew(aCx: *mut JSContext, aObj: HandleObject,
                      aHandler: *const ::libc::c_void)
     -> *mut JSObject;
    pub fn GetProxyExtra(obj: *mut JSObject, slot: u32) -> Value;
    pub fn GetProxyPrivate(obj: *mut JSObject) -> Value;
    pub fn SetProxyExtra(obj: *mut JSObject, slot: u32, val: Value);
    pub fn RUST_JSID_IS_INT(id: HandleId) -> u8;
    pub fn RUST_JSID_TO_INT(id: HandleId) -> i32;
    pub fn RUST_JSID_IS_STRING(id: HandleId) -> u8;
    pub fn RUST_JSID_TO_STRING(id: HandleId) -> *mut JSString;
    pub fn RUST_SET_JITINFO(func: *mut JSFunction, info: *const JSJitInfo);
    pub fn RUST_INTERNED_STRING_TO_JSID(cx: *mut JSContext,
                                        str: *mut JSString) -> jsid;
    pub fn RUST_js_GetErrorMessage(userRef: *mut ::libc::c_void,
                                   errorNumber: u32)
     -> *const JSErrorFormatString;
    pub fn IsProxyHandlerFamily(obj: *mut JSObject) -> u8;
    pub fn GetProxyHandlerExtra(obj: *mut JSObject) -> *const ::libc::c_void;
    pub fn GetProxyHandler(obj: *mut JSObject) -> *const ::libc::c_void;
    pub fn ReportError(aCx: *mut JSContext, aError: *const i8);
    pub fn IsWrapper(obj: *mut JSObject) -> u8;
    pub fn UnwrapObject(obj: *mut JSObject, stopAtOuter: u8) -> *mut JSObject;
    pub fn AppendToAutoIdVector(v: *mut AutoIdVector, id: jsid) -> u8;
    pub fn CreateAutoObjectVector(aCx: *mut JSContext)
     -> *mut AutoObjectVector;
    pub fn AppendToAutoObjectVector(v: *mut AutoObjectVector,
                                    obj: *mut JSObject) -> u8;
    pub fn DeleteAutoObjectVector(v: *mut AutoObjectVector);
}
